[{"title":"iPhone13 等老款机器调出灵动岛","path":"/2023/01/12/iPhone13-等老款机器调出灵动岛/","content":"前言今天刷 b 站时看到了个方法 【【全网首发】iOS 16 除14 Pro&#x2F;14 Pro Max设备未越狱实现灵动岛功能-哔哩哔哩】 注意事项适用系统:仅 iOS16，最高 iOS16.1.2 封顶 iOS15 不可修改，会白苹果！！！ iOS15 不可修改，会白苹果！！！ iOS15 不可修改，会白苹果！！！ iPhoneXr,iPhone11等由于分辨率问题，修改开机会报错，介意的请勿尝试 效果图: 前期准备 工具: Santander 文件管理器, 手, 大脑 手机：不限设备，但系统必须为iOS16beta1-iOS16.1.2 Santander 文件管理器下载链接: 查看链接 如证书失效，请自行使用签名工具签名安装 正式操作1.打开文件管理器点击右上角三个点，点击 Go to.. 点击 Other.. 并粘贴路径后点击 Go 按钮: 1/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist 2.点击 CacheExtra 3.Search 框内搜索 opei 点击搜索结果，并点击ArtworkDeviceSubType 项修改 value 为 2556，这是iPhone14Pro的值。如果你的手机是iPhone13mini，iPhone12mini，请使用iPhone14ProMax的值: 2796 并请记住原来的 value，方便后续修改回本机的数字 修改完成后点击 Back ，点击右上角 Done 4.再次点击右上角三个点 点击 Respring 按钮注销重启后完成修改，可见灵动岛已经出现","tags":["iOS","越狱"],"categories":["iOS"]},{"title":"从零开始的Android Recovery编译","path":"/2021/07/18/从零开始的Android-Recovery编译/","content":"前言:很多老哥想在自己刷机时使用更好看的Rec，然而自己不会编译，亦或是自己用的手机没有Rec，想自己动手编译一个来愉快的刷机，本篇教程可以带你快速入门！ 一.要求 1.一双手 2.一个会用搜索引擎的大脑 3.一台电脑 4.硬盘剩余50GB至少 5.一个Linux操作环境，推荐实体机双系统安装Ubuntu20.04，当然你也可以使用虚拟机，WSL2等来安装Ubuntu 二.前期准备工作本人在这里使用WSL2进行编译 系统版本：Windows 11 21H2 22000.71 WSL版本：Ubuntu20.04(WSL2) 我们进入GitHub，找到TWRP的源码 这里我们选择 twrp-10.0 的分支进行编译 首先 打开终端 安装编译需要用的依赖 sudo apt update sudo apt install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev git 安装repo,这是Google开发的用于管理Android版本库的一个工具 mkdir -p ~/bin curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo sudo cp ~/bin/repo /bin/repo sudo chmod a+x /bin/repo export REPO_URL=&#39;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#39; 设置Github代理，以解决国内拉源码慢或无法拉取的问题 [git config –global url.https://mirrors.bfsu.edu.cn/git/AOSP/.insteadof https://android.googlesource.com] [git config –global url.https://hub.fastgit.org/.insteadof https://github.com] Fastgit代理站炸掉了，请不要使用代理站 mkdir twrp cd twrp repo init --depth=1 -u git://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git -b twrp-10.0 注： 1.这里的–depth&#x3D;1参数是只拉取一层提交，可以减少拉下来的源码大小 2.这里的twrp-10.0是要拉取的分支，您可以根据自己的需求在twrp项目地址中找到需要的版本并替换命令中的twrp-10.0 出现如图的repo has been initialized in xxxxxxx就成功了 接下来我们开始 同步源码 repo sync 出现如图的提示我们就拉取完毕源码啦 三.编译准备工作接下来就要开始编译了 准备工作： 准备好自己设备的 DeviceTree (下文称 dt) dt的获取有两个渠道: 1.Github上搜索 手机代号+twrp这是一个小例子： cepheus twrp cd ~/twrp git clone https://github.com/mauronofrio/android_device_xiaomi_cepheus device/xiaomi/cepheus 分析: git clone 项目地址 克隆到目标路径 这时候有人肯定就要说了 我哪来的设备树?我这手机那么冷门？鬼都不知道有这手机 2.使用脚本生成dt好在Github上有大佬给我们写了一键生成omni dt的工具 项目地址 接下来我教你们使用它 需要的文件: 设备的recovery&#x2F;boot.img (手机是A-Only或Sar的提取recovery.img,A&#x2F;B分区的提取boot.img) sudo apt install cpio pip3 install twrpdtgen python3 -m twrpdtgen recovery/boot.img的绝对路径 如图我把recovery镜像放在了&#x2F;root&#x2F;dtgen文件夹里 则我要运行 python3 -m twrpdtgen &#x2F;root&#x2F;dtgen&#x2F;recovery.img 出现如图提示就大功告成了，在当前路径下就会出现生成好的dt 进入生成的output文件夹，我们可以看到一个名为厂商名的文件夹 这里是meizu 我们复制这个文件夹到源码目录的device文件夹中，如果没有device文件夹则自行新建一个 进入源码目录&#x2F;device&#x2F;厂商名的文件夹里 里面还有一个文件夹，这是你的设备名，记住这个文件夹名，待会会用到(下称设备名) 四.开始编译回到源码根目录 . build/envsetup.sh lunch omni_设备名-eng 这是一个小例子: lunch omni_meizu16sPro-eng 出现如图就是成功了 export ALLOW_MISSING_DEPENDENCIES=true export LC_ALL=&quot;C&quot; mka recoveryimage 至此，您就已经开始编译，此过程比较漫长，取决于您电脑的配置 当当当！出现这个提示意味着我们已经编译完成了 我们进入out&#x2F;target&#x2F;product&#x2F;设备名 这个文件夹 里面的recovery就是编译出的twrp！","tags":["Android","Linux"],"categories":["Android","编译"]},{"title":"about","path":"/about/index.html","content":"欢迎来到wwrrj的博客这里是 WWRRJ，一位来自中国江苏的高中生。对于 Android 开发和单片机（如 esp8266，esp32，Arduino）有着深深的热爱。目前，我正在学习 Java 和 C++，喜欢在项目中寻找新的技术整合方式。欢迎在我的个人博客上关注我的学习和实践之路，我将会在其中分享我的技术知识。"}]